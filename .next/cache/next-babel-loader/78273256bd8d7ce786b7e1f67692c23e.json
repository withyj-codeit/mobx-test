{"ast":null,"code":"import _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime-corejs2/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime-corejs2/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime-corejs2/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action, runInAction, reaction } from 'mobx';\nimport axios from 'axios';\nvar AuthStore = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function AuthStore() {\n    var _this = this;\n\n    var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AuthStore);\n\n    _initializerDefineProperty(this, \"token\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"inProgress\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"authData\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"userData\", _descriptor4, this);\n\n    this.userData.email = initialData.email;\n    this.userData.username = initialData.username;\n    reaction(function () {\n      return _this.token;\n    }, function (token) {\n      document.cookie = \"jwt=\".concat(token, \";httponly;secure\");\n    });\n  }\n\n  _createClass(AuthStore, [{\n    key: \"setEmail\",\n    value: function setEmail(email) {\n      this.authData.email = email;\n    }\n  }, {\n    key: \"setPassword\",\n    value: function setPassword(password) {\n      this.authData.password = password;\n    }\n  }, {\n    key: \"setUsername\",\n    value: function setUsername(username) {\n      this.authData.username = username;\n    }\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios({\n                  method: 'post',\n                  url: 'http://localhost:8000/api/auth/login',\n                  data: {\n                    email: this.authData.email,\n                    password: this.authData.password\n                  }\n                });\n\n              case 2:\n                response = _context.sent;\n                runInAction(function () {\n                  _this2.token = response.data.token;\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }() // 쿠키 속 jwt로 자동 로그인 하는 로직\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(token) {\n        var response, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios({\n                  method: 'get',\n                  url: 'http://localhost:8000/api/auth/check',\n                  headers: {\n                    'jwt': token\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n                result = response.data.info;\n                this.setUserData(result);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }, {\n    key: \"setUserData\",\n    value: function setUserData(userData) {\n      this.userData.email = userData.email;\n      this.userData.username = userData.username;\n    } // logout할 때 가지고 있던 쿠키 만료 & 삭제 하는 로직\n    // // @action reset() {\n    // //   this.authData.email\n    // //   this.authData.password\n    // //   this.authData.username\n    // // }\n    // @action async register() {\n    //   const response = await axios({\n    //     method: 'post',\n    //     url: 'http://localhost:8000/api/auth/register',\n    //     data: {\n    //       email: this.authData.email,\n    //       password: this.authData.password,\n    //       username: this.authData.username\n    //     }\n    //   })\n    //   // 회원가입하고 쿠키에 토큰 넣는 로직 만들어야 함!!\n    //   runInAction(() => {\n    //     this.token = response.data.token\n    //   })\n    // }\n    // @action async check() {\n    //   const response = await axios({\n    //     method: 'get',\n    //     url: 'http://localhost:8000/api/auth/check',\n    //     headers: {'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDM2YWQ2NmE5YjI1Njg3NDFhYmY4ODciLCJlbWFpbCI6IndpdGh5akBjb2RlaXQua3IiLCJ1c2VybmFtZSI6Im1hc3RlciIsImFkbWluIjp0cnVlLCJpYXQiOjE1NjM5NTM3NDcsImV4cCI6MTU2NDU1ODU0NywiaXNzIjoiY29kZWl0LmtyIiwic3ViIjoidXNlckluZm8ifQ.QDdr_sA-j2IDoKa9uv3RFSMGUSk3ZKpN4M3EyPWvc8Y'}\n    //   })\n    //   runInAction(() => {\n    //     this.userData.email = response.data.info.email\n    //     this.userData.username = response.data.info.username\n    //   })\n    // }\n\n  }]);\n\n  return AuthStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"token\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"inProgress\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"authData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      email: '',\n      password: '',\n      username: ''\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"userData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      email: '',\n      username: '',\n      userState: ''\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setEmail\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setEmail\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setPassword\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setUsername\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setUsername\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"login\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"login\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setUserData\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setUserData\"), _class.prototype)), _class);\nexport { AuthStore };","map":{"version":3,"sources":["/Users/withyj/OtherProjects/MobxForReal/src/stores/AuthStore.ts"],"names":["observable","action","runInAction","reaction","axios","AuthStore","initialData","userData","email","username","token","document","cookie","authData","password","method","url","data","response","headers","result","info","setUserData","userState"],"mappings":";;;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,MAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,S;;;AAcJ,uBAAkC;AAAA;;AAAA,QAAtBC,WAAsB,uEAAJ,EAAI;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAChC,SAAKC,QAAL,CAAcC,KAAd,GAAsBF,WAAW,CAACE,KAAlC;AACA,SAAKD,QAAL,CAAcE,QAAd,GAAyBH,WAAW,CAACG,QAArC;AAEAN,IAAAA,QAAQ,CACN;AAAA,aAAM,KAAI,CAACO,KAAX;AAAA,KADM,EAEN,UAAAA,KAAK,EAAI;AACPC,MAAAA,QAAQ,CAACC,MAAT,iBAAyBF,KAAzB;AACD,KAJK,CAAR;AAMD;;;;6BAEgBF,K,EAAO;AAAE,WAAKK,QAAL,CAAcL,KAAd,GAAsBA,KAAtB;AAA6B;;;gCACnCM,Q,EAAU;AAAE,WAAKD,QAAL,CAAcC,QAAd,GAAyBA,QAAzB;AAAmC;;;gCAC/CL,Q,EAAU;AAAE,WAAKI,QAAL,CAAcJ,QAAd,GAAyBA,QAAzB;AAAmC;;;;;;;;;;;;;;;uBAG1CL,KAAK,CAAC;AAC3BW,kBAAAA,MAAM,EAAE,MADmB;AAE3BC,kBAAAA,GAAG,EAAE,sCAFsB;AAG3BC,kBAAAA,IAAI,EAAE;AACJT,oBAAAA,KAAK,EAAE,KAAKK,QAAL,CAAcL,KADjB;AAEJM,oBAAAA,QAAQ,EAAE,KAAKD,QAAL,CAAcC;AAFpB;AAHqB,iBAAD,C;;;AAAtBI,gBAAAA,Q;AASNhB,gBAAAA,WAAW,CAAC,YAAM;AAChB,kBAAA,MAAI,CAACQ,KAAL,GAAaQ,QAAQ,CAACD,IAAT,CAAcP,KAA3B;AACD,iBAFU,CAAX;;;;;;;;;;;;;;;QAKF;;;;;;;iDACYA,K;;;;;;;uBACaN,KAAK,CAAC;AAC3BW,kBAAAA,MAAM,EAAE,KADmB;AAE3BC,kBAAAA,GAAG,EAAE,sCAFsB;AAG3BG,kBAAAA,OAAO,EAAE;AAAC,2BAAOT;AAAR;AAHkB,iBAAD,C;;;AAAtBQ,gBAAAA,Q;AAKAE,gBAAAA,M,GAASF,QAAQ,CAACD,IAAT,CAAcI,I;AAC7B,qBAAKC,WAAL,CAAiBF,MAAjB;;;;;;;;;;;;;;;;;;gCAGkBb,Q,EAAU;AAC5B,WAAKA,QAAL,CAAcC,KAAd,GAAsBD,QAAQ,CAACC,KAA/B;AACA,WAAKD,QAAL,CAAcE,QAAd,GAAyBF,QAAQ,CAACE,QAAlC;AACD,K,CAGD;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;kFAjGCT,U;;;;;WAA2B,E;;8EAC3BA,U;;;;;WAAiC,K;;4EACjCA,U;;;;;WAAsB;AACrBQ,MAAAA,KAAK,EAAE,EADc;AAErBM,MAAAA,QAAQ,EAAE,EAFW;AAGrBL,MAAAA,QAAQ,EAAE;AAHW,K;;4EAKtBT,U;;;;;WAAsB;AACrBQ,MAAAA,KAAK,EAAE,EADc;AAErBC,MAAAA,QAAQ,EAAE,EAFW;AAGrBc,MAAAA,SAAS,EAAE;AAHU,K;;6DAkBtBtB,M,kJACAA,M,qJACAA,M,+IAEAA,M,+IA0BAA,M;AA4CH,SAASI,SAAT","sourcesContent":["import { observable, action, runInAction, reaction } from 'mobx';\nimport axios from 'axios'\n\nclass AuthStore {\n  @observable private token = '';\n  @observable inProgress: Boolean = false;\n  @observable authData = {\n    email: '',\n    password: '',\n    username: '',\n  };\n  @observable userData = {\n    email: '',\n    username: '',\n    userState: ''\n  }\n\n  constructor(initialData:any = {}) {\n    this.userData.email = initialData.email;\n    this.userData.username = initialData.username;\n\n    reaction(\n      () => this.token,\n      token => {\n        document.cookie = `jwt=${token};httponly;secure`\n      }\n    )\n  }\n\n  @action setEmail(email) { this.authData.email = email }\n  @action setPassword(password) { this.authData.password = password }\n  @action setUsername(username) { this.authData.username = username }\n\n  @action async login() {\n    const response = await axios({\n      method: 'post',\n      url: 'http://localhost:8000/api/auth/login',\n      data: {\n        email: this.authData.email,\n        password: this.authData.password,\n      }\n    })\n\n    runInAction(() => {\n      this.token = response.data.token\n    })\n  }\n\n  // 쿠키 속 jwt로 자동 로그인 하는 로직\n  async fetch(token) {\n    const response = await axios({\n      method: 'get',\n      url: 'http://localhost:8000/api/auth/check',\n      headers: {'jwt': token}\n    })\n    const result = response.data.info\n    this.setUserData(result);\n  }\n\n  @action setUserData(userData) {\n    this.userData.email = userData.email;\n    this.userData.username = userData.username;\n  }\n\n\n  // logout할 때 가지고 있던 쿠키 만료 & 삭제 하는 로직\n\n  // // @action reset() {\n  // //   this.authData.email\n  // //   this.authData.password\n  // //   this.authData.username\n  // // }\n\n  // @action async register() {\n  //   const response = await axios({\n  //     method: 'post',\n  //     url: 'http://localhost:8000/api/auth/register',\n  //     data: {\n  //       email: this.authData.email,\n  //       password: this.authData.password,\n  //       username: this.authData.username\n  //     }\n  //   })\n\n  //   // 회원가입하고 쿠키에 토큰 넣는 로직 만들어야 함!!\n  //   runInAction(() => {\n  //     this.token = response.data.token\n  //   })\n  // }\n\n  // @action async check() {\n  //   const response = await axios({\n  //     method: 'get',\n  //     url: 'http://localhost:8000/api/auth/check',\n  //     headers: {'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDM2YWQ2NmE5YjI1Njg3NDFhYmY4ODciLCJlbWFpbCI6IndpdGh5akBjb2RlaXQua3IiLCJ1c2VybmFtZSI6Im1hc3RlciIsImFkbWluIjp0cnVlLCJpYXQiOjE1NjM5NTM3NDcsImV4cCI6MTU2NDU1ODU0NywiaXNzIjoiY29kZWl0LmtyIiwic3ViIjoidXNlckluZm8ifQ.QDdr_sA-j2IDoKa9uv3RFSMGUSk3ZKpN4M3EyPWvc8Y'}\n  //   })\n\n  //   runInAction(() => {\n  //     this.userData.email = response.data.info.email\n  //     this.userData.username = response.data.info.username\n  //   })\n  // }\n}\nexport { AuthStore }"]},"metadata":{},"sourceType":"module"}