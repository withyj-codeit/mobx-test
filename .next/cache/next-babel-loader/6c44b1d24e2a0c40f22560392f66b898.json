{"ast":null,"code":"import _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime-corejs2/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime-corejs2/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime-corejs2/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action, runInAction, reaction } from 'mobx';\nimport axios from 'axios';\nvar AuthStore = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  // cookie에 token 넣어주는 로직 \n  function AuthStore(token) {\n    var _this = this;\n\n    _classCallCheck(this, AuthStore);\n\n    _initializerDefineProperty(this, \"inProgress\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"authData\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"token\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"userData\", _descriptor4, this);\n\n    // this.init(token);\n    this.init2(token);\n    reaction(function () {\n      return _this.token;\n    }, function (token) {\n      document.cookie = \"jwt=\".concat(token);\n    });\n  }\n\n  _createClass(AuthStore, [{\n    key: \"getUserData\",\n    value: function () {\n      var _getUserData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios({\n                  method: 'get',\n                  url: 'http://localhost:8000/api/auth/check',\n                  headers: {\n                    'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDM2YWQ2NmE5YjI1Njg3NDFhYmY4ODciLCJlbWFpbCI6IndpdGh5akBjb2RlaXQua3IiLCJ1c2VybmFtZSI6Im1hc3RlciIsImFkbWluIjp0cnVlLCJpYXQiOjE1NjM5NTM3NDcsImV4cCI6MTU2NDU1ODU0NywiaXNzIjoiY29kZWl0LmtyIiwic3ViIjoidXNlckluZm8ifQ.QDdr_sA-j2IDoKa9uv3RFSMGUSk3ZKpN4M3EyPWvc8Y'\n                  }\n                }).then(function (response) {\n                  return response;\n                });\n\n              case 2:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getUserData() {\n        return _getUserData.apply(this, arguments);\n      }\n\n      return getUserData;\n    }()\n  }, {\n    key: \"setEmail\",\n    value: function setEmail(email) {\n      this.authData.email = email;\n    }\n  }, {\n    key: \"setPassword\",\n    value: function setPassword(password) {\n      this.authData.password = password;\n    }\n  }, {\n    key: \"setUsername\",\n    value: function setUsername(username) {\n      this.authData.username = username;\n    } // @action reset() {\n    //   this.authData.email\n    //   this.authData.password\n    //   this.authData.username\n    // }\n\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios({\n                  method: 'post',\n                  url: 'http://localhost:8000/api/auth/register',\n                  data: {\n                    email: this.authData.email,\n                    password: this.authData.password,\n                    username: this.authData.username\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n                // 회원가입하고 쿠키에 토큰 넣는 로직 만들어야 함!!\n                runInAction(function () {\n                  _this2.token = response.data.token;\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function register() {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios({\n                  method: 'post',\n                  url: 'http://localhost:8000/api/auth/login',\n                  data: {\n                    email: this.authData.email,\n                    password: this.authData.password\n                  }\n                });\n\n              case 2:\n                response = _context3.sent;\n                runInAction(function () {\n                  _this3.token = response.data.token;\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }, {\n    key: \"check\",\n    value: function () {\n      var _check = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this4 = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios({\n                  method: 'get',\n                  url: 'http://localhost:8000/api/auth/check',\n                  headers: {\n                    'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDM2YWQ2NmE5YjI1Njg3NDFhYmY4ODciLCJlbWFpbCI6IndpdGh5akBjb2RlaXQua3IiLCJ1c2VybmFtZSI6Im1hc3RlciIsImFkbWluIjp0cnVlLCJpYXQiOjE1NjM5NTM3NDcsImV4cCI6MTU2NDU1ODU0NywiaXNzIjoiY29kZWl0LmtyIiwic3ViIjoidXNlckluZm8ifQ.QDdr_sA-j2IDoKa9uv3RFSMGUSk3ZKpN4M3EyPWvc8Y'\n                  }\n                });\n\n              case 2:\n                response = _context4.sent;\n                runInAction(function () {\n                  _this4.userData.email = response.data.info.email;\n                  _this4.userData.username = response.data.info.username;\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function check() {\n        return _check.apply(this, arguments);\n      }\n\n      return check;\n    }()\n  }, {\n    key: \"init2\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(token) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return axios({\n                  method: 'get',\n                  url: 'http://localhost:8000/api/auth/check',\n                  headers: {\n                    'x-access-token': \"\".concat(token)\n                  }\n                });\n\n              case 2:\n                response = _context5.sent;\n                this.userData.email = response.data.info.email;\n                this.userData.username = response.data.info.username; // runInAction(() => {\n                //   this.userData.email = response.data.info.email\n                //   this.userData.username = response.data.info.username\n                // })\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function init2(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init2;\n    }() // init(token: string) {\n    //   this.userData.email = token\n    // }\n\n  }]);\n\n  return AuthStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"inProgress\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"authData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      email: '',\n      password: '',\n      username: ''\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"token\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"userData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      email: '',\n      username: ''\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getUserData\", [observable], _Object$getOwnPropertyDescriptor(_class.prototype, \"getUserData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setEmail\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setEmail\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setPassword\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setUsername\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"setUsername\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"register\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"register\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"login\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"login\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"check\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"check\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"init2\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"init2\"), _class.prototype)), _class);\nexport { AuthStore };","map":{"version":3,"sources":["/Users/withyj/OtherProjects/MobxForReal/src/stores/AuthStore.ts"],"names":["observable","action","runInAction","reaction","axios","AuthStore","token","init2","document","cookie","method","url","headers","then","response","email","authData","password","username","data","userData","info"],"mappings":"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","sourcesContent":["import { observable, action, runInAction, reaction } from 'mobx';\nimport axios from 'axios'\n\nclass AuthStore {\n  // cookie에 token 넣어주는 로직 \n  constructor(token) {\n    // this.init(token);\n    this.init2(token)\n\n    reaction(\n      () => this.token,\n      token => {\n        document.cookie = `jwt=${token}`\n      }\n    )\n  }\n\n  @observable inProgress: Boolean = false;\n  @observable authData = {\n    email: '',\n    password: '',\n    username: '',\n  };\n  @observable\n  private token = '';\n\n  @observable userData = {\n    email: '',\n    username: ''\n  }\n\n  @observable async getUserData() {\n    const response = await axios({\n      method: 'get',\n      url: 'http://localhost:8000/api/auth/check',\n      headers: {'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDM2YWQ2NmE5YjI1Njg3NDFhYmY4ODciLCJlbWFpbCI6IndpdGh5akBjb2RlaXQua3IiLCJ1c2VybmFtZSI6Im1hc3RlciIsImFkbWluIjp0cnVlLCJpYXQiOjE1NjM5NTM3NDcsImV4cCI6MTU2NDU1ODU0NywiaXNzIjoiY29kZWl0LmtyIiwic3ViIjoidXNlckluZm8ifQ.QDdr_sA-j2IDoKa9uv3RFSMGUSk3ZKpN4M3EyPWvc8Y'}\n    }).then(response => response)\n    // console.log(response.data.info)\n    return response\n  }\n\n  @action setEmail(email) {\n    this.authData.email = email;\n  }\n\n  @action setPassword(password) {\n    this.authData.password = password\n  }\n\n  @action setUsername(username) {\n    this.authData.username = username\n  }\n\n  // @action reset() {\n  //   this.authData.email\n  //   this.authData.password\n  //   this.authData.username\n  // }\n\n  @action async register() {\n    const response = await axios({\n      method: 'post',\n      url: 'http://localhost:8000/api/auth/register',\n      data: {\n        email: this.authData.email,\n        password: this.authData.password,\n        username: this.authData.username\n      }\n    })\n\n    // 회원가입하고 쿠키에 토큰 넣는 로직 만들어야 함!!\n    runInAction(() => {\n      this.token = response.data.token\n    })\n  }\n\n  @action async login() {\n    const response = await axios({\n      method: 'post',\n      url: 'http://localhost:8000/api/auth/login',\n      data: {\n        email: this.authData.email,\n        password: this.authData.password,\n      }\n    })\n\n    runInAction(() => {\n      this.token = response.data.token\n    })\n  }\n\n  @action async check() {\n    const response = await axios({\n      method: 'get',\n      url: 'http://localhost:8000/api/auth/check',\n      headers: {'x-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDM2YWQ2NmE5YjI1Njg3NDFhYmY4ODciLCJlbWFpbCI6IndpdGh5akBjb2RlaXQua3IiLCJ1c2VybmFtZSI6Im1hc3RlciIsImFkbWluIjp0cnVlLCJpYXQiOjE1NjM5NTM3NDcsImV4cCI6MTU2NDU1ODU0NywiaXNzIjoiY29kZWl0LmtyIiwic3ViIjoidXNlckluZm8ifQ.QDdr_sA-j2IDoKa9uv3RFSMGUSk3ZKpN4M3EyPWvc8Y'}\n    })\n\n    runInAction(() => {\n      this.userData.email = response.data.info.email\n      this.userData.username = response.data.info.username\n    })\n  }\n  @action\n  private async init2(token: string) {\n    // this.userData.email = token\n    const response = await axios({\n      method: 'get',\n      url: 'http://localhost:8000/api/auth/check',\n      headers: {'x-access-token': `${token}`}\n    })\n    this.userData.email = response.data.info.email\n    this.userData.username = response.data.info.username\n\n    // runInAction(() => {\n    //   this.userData.email = response.data.info.email\n    //   this.userData.username = response.data.info.username\n    // })\n  }\n\n  // init(token: string) {\n  //   this.userData.email = token\n  // }\n}\nexport { AuthStore }"]},"metadata":{},"sourceType":"module"}